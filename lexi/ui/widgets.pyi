# pylint: disable=all
from typing import Any, Dict, TextIO

from gi.repository import Adw, Gtk

class LexiconRow(Gtk.Box):
    """Lexicon row widget

    Parameters
    ----------
    file : str
        The file to load the lexicon from.
    """

    __gtype_name__: str
    add_word_dialog: Adw.Dialog
    word_entry_row: Adw.EntryRow
    translation_entry_row: Adw.EntryRow
    example_entry_row: Adw.EntryRow
    actions_popover: Gtk.PopoverMenu
    rename_popover: Gtk.Popover
    rename_entry: Adw.EntryRow
    deletion_alert_dialog: Adw.AlertDialog
    title: Gtk.Label

    def __init__(self, file: str) -> None: ...
    def save_lexicon(self) -> None: ...
    def delete_lexicon(self, _alert_dialog: Adw.AlertDialog, response: str) -> None: ...
    def rename_lexicon(self, *_args) -> None: ...
    def on_rename_entry_changed(self, text: Gtk.Text) -> None: ...
    def do_rename(self, entry_row: Adw.EntryRow) -> None: ...
    def show_add_word_dialog(self) -> None: ...
    def add_word(self, *_args) -> None: ...
    def check_if_word_is_empty(self, row: Adw.EntryRow) -> None: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, name: str) -> None: ...

class WordRow(Adw.ActionRow):
    """Word row widget
    Parameters
    ----------
    word : dict
        a dict with the word [id, word, pronunciation, translations, types, examples, references]
    """

    __gtype_name__: str
    check_button: Gtk.CheckButton
    check_button_revealer: Gtk.Revealer
    lexicon: LexiconRow
    word_dict: Dict[str, Any]

    def __init__(self, word: Dict[str, Any], lexicon: LexiconRow) -> None: ...
    def load_word(self, *_args) -> None: ...
    def remove_list_prop_on_backspace(self, text: Gtk.Text) -> None: ...
    def update_word(self, text: Gtk.Text) -> None: ...
    def add_list_prop(self, button: Gtk.Button) -> None: ...
    def delete(self) -> None: ...
    def do_check_button(self, *_args) -> None: ...
    def on_check_button_toggled(self, button: Gtk.CheckButton) -> None: ...
    @property
    def word(self) -> str: ...
    @word.setter
    def word(self, word: str) -> None: ...
    @property
    def pronunciation(self) -> str: ...
    @pronunciation.setter
    def pronunciation(self, pronunciation: str) -> None: ...
